UART0
	- interfaces to serial-to-USB chip on KL25Z
	- ch 39 of KL25_FRM
	- Full-Duplex
	- Asynchronous
	- Baud Rate Generator, TX, RX blocks
	-  TX and RX use same BR Generator
	- RX driven by BAUD RATE CLOCK
	- TX driven by BAUD RATE CLOCK/OSR

IRQ's:
	- Vector 28
	- IRQn 12
	- IPR reg 3

Modes:
	STOP: remains functional as long as clocks enabled
		  can generate interrupts to cause a wakeup

	WAIT: can be configured to Stop in Wait mode using DOZEEN bit
		  finishes xmitting current word 

	DEBUG: remains functional

HW BLOCKS:
	UART_D -- TX Buffer (Write-only)
		- interfaces to internal bus (input)
		- sends data out to tx shift register

	11-Bit TX Shift Register 
		- {Stop, 8/9-bit data, Start}
		- lsbit first by default
		- can be inverted through xor if TXINV = 1
		- loaded from UART_D
		- shifts out serially to TxD pin
		- When LOOPS = 1, RSRC = 1, Loop control logic sends TxD to RxD
	
	Transmit Control
		- sends signals to TX shift register
			- load
			- shift enable 
			- preamble
			- break 
		- TxD control
		- Outputs interrupts, Tx IRQ
			- TDRE, asserted if TIE = 1
			- TC, asserted if TCIE = 1

	BAUDRATE GENERATOR
		- takes BAUD CLOCK and SBR12:0
		- divides BAUD CLOCK by SBR12:0 and outputs signal to RECEIVE CONTROL AND RX SHIFT REGISER
		- 12-BIT RECEIVE SHIFT REGISTER
			- interfaces to data buffer
			- gets control signals from other blocks

REGISTERS AND BITFIELDS:
	
	UARTx_BDH:
		{LBKDIE = 0, RXEDGIE = 0, SBNS = 0, SBR[5] = x}
		- LIN Break Detect Interrupt Disabled	
		- RX input active edge interrupt disabled
		- Stop Bit number select -- 1 stop bit
		- SBR[5] not sure yet... divides BAUD CLOCK to give BAUD RATE

	UARTx_BDL:
		{SBR[8]}
		- Baud Rate divisor bits. SBR in range(0,8192)
		- Baud Rate = BAUD_CLK/((OSR + 1) * SBR)

------->Which clock is BAUD CLOCK? What is its frequency?

	UARTx_C1:
		{LOOPS, DOZEEN, RSRC, M, WAKE, ILT, PE, PT}
		- LOOPS: enables loop back, so that Tx_D --> Rx_D (= 0)
		- DOZEEN: UART disabled in Wait mode (= 0)
		- RSRC: Receiver Source Select. Used for LOOPS = 1
			Allows TX to connect to RX (DONT CARE)
		M: 8/9 bit data (= 0)
		- WAKE: Receiver wake up method select
			Idle-line wakeup 
			Address-mark wakeup 
			May want to use an idle-line wakeup (= 0)
		- ILT: idline line type select
			- idle character bit count starts after start
			- idle character bit count starts after stop

----------->(= 0)?

		- PE: Parity Enable
			- Don't bother
		- PT: Parity Type
			- Ignored when PE = 0

	UARTx_C2:
	{TIE, TCIE, RIE, ILIE, TE, RE, RWU, SBK}
	- TIE: Transmit Interrupt Enable (may check this before writing)
		- enable hw interrupts when TDRE flag is asserted
		- TDRE is Transmit Data Register Empty signal
	- TCIE: Transmission Complete Interrupt Enable (may check this before writing)
		- enable hw interrupts when TC flag is asserted
		- TC is Transmission Complete signal
	- RIE: Receiver Interrupts Enable for RDRF
		- enables hw interrupts when RDRF flag is asserted
		- RDRF is Receiver Data Ready Flag
		- probably enable this bit.
	- ILIE: Idle line interrupt enable for IDLE
		- enables hw interrupts when IDLE bit is high
	- TE: Transmitter Enable. sets UART_TX pin as output
		- TE has to be 1 to use UART TX. 
	- RE: Receiver Enable: Receiver enabled
		- RE should probably be one. Has to be when receiving
	- RWU: Receiver Wakeup Control
		- Puts UART in standby mode so that it waits for a WAKE condition
	- SBK: send break
		- can probably ignore this


	UARTx_S1:
	{TDRE, TC, RDRF, IDLE, OR, NF, FE, PF}
	- TDRE: Transmit Data Register Empty: Transmit Buffer full/empty (0/1)
	- TC: Transmission Complete Flag: Transmitter active/idle (0/1)
	- RDRF: Receive Data Register Full Flag. Receive Data Buffer Empty/Full (0/1)
	- IDLE: detection of an idle line. Timing determined by ILT
	- OR: Receive Overrun. New UART data lost.
	- NF: Noise detected Flag. Samples data line multiple times for each bit and if samples disagree then NF = 1.
	- FE: Framing Error. Asserted when logic 0 detected instead of Stop Bit.
	- PE. Parity Error. 

	UARTx_S2:
	{LBKDIF, RXEDGIF, MSBF, RXINV, RWUID, BRK13, LBKDE, RAF}
	- LBKDIF: LIN Break character Detect Flag
	- RXEDGIF: RX active edge detect flag
	- MSBF: MSb first
	- RXINV: Invert RX data
	- RWUID: controls if IDLE bit gets set when idle character is received
	- BRK13: Increases transmitted break character length
	- LBKDE: LIN Break Detection
	- RAF: Receiver Active Flag. Asserted when UART receiver active (not idle)

	
	UARTx_C3:
	{R8T9, R9T8, TXDIR, TXINV, ORIE, NEIE, FEIE, PEIE}
	- don't worry about the first two bits
	- TXDIR: TX pin direction for single wire mode (LOOPS = RSRC = 1)
	- TXINV: invert tx data
	- ORIE: enable overrun interrupts
	- NEIE: enable noise error interrupts
	- FEIE: enable frame error interrupts
	- PEIE: enable parity error interrupts


	UARTx_D:
	{RxTx} x = 0,1,...,6,7
	-Read receive data buffer x or Write Transmit buffer x


	Match Address Registers (2), Don't care about these

	UARTx_C4:
	{MAEN1, MAEN2, M1, OSR[5]}
	- Match Address Enable shit. Don't worry about it.
	- OSR: Oversampling Ratio. 4x - 32x.
	

	UARTx_C5:
	{TDMAE, 0, RDMAE,0,0,0,BOTHEDGE, RESYNCDIS}
	- DMA stuff
	- enable sampling on both edges
		


	IMPORTANT TX INFO:
	- UART_TX idles high
	- Transmitter enable with C2.TE = 1
		- queues preamble character
		- transmitter remains idle until data is available in tx data buffer
	- 8-13 bits data (I'll use 8)
	- When tx shift reg is ready, data from tx buffer written in, TDRE = 1, shift reg synced with BR clk, and data shifted out
	- if tx shift reg is ready and tx data buffer is empty, TC flag gets asserted and idle mode is entered. 
	- Disabling TX (TE -> 0) disables transmitter after current character is set
	
	IMPORTANT RX INFO:
	- enable with UARTx_C2.RE bit
	- after stop bit received, UARTx_S1.RDRF is set
		- if UARTx_S1.RDRF is set and stop bit received, then overrun flag is set
	- when UARTx_S1.RDRF = 1, data can be read from UART_D


	DATA SAMPLING:
	- UART RX can oversample at 4-32x BRCLK.
	- Receiver searches for start condition (falling edge) at oversample x BRCLK
	- RX samples 1 to OSR times per bit time
	- 2/3 samples must detect falling edge to avoid Noise Error
	

	INTERRUPTS/STATUS FLAGS:
	- UART can generate 3 seperate interrupts
		1. TX interrupts --> TDRE and TC
		2. RX interrupts --> RDRF, IDLE, RXEDGIF, LBKDIF
		3. Error Condition Interrupts --> OR, NE, FE, PF




 





	


		
